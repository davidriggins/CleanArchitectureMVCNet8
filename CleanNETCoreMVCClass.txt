.NET Core MVC Clean Architecture [Bhrugen Patel]  2/20/25


25 Create Project
Create Solution/Project
- Open Visual Studio
- Create New ASP.NET Core Web App (Model-View-Controller)
- Create a Project name and Solution Name (WhiteLagoon)
- Additional Information Page:
	- .NET 8.0 [Framework]
	- None [Authentication Type]
	- Check [Configure for HTTPS]


27 Create Clean Architecture
Add a New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Domain)

Add another New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Application)

Add another New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Infrastructure)

Delete all the default Class1.cs files from the new projects.


28 Create Villa Model
We want to break out the default architecture into a Clean Architecture
- Right click the WhiteLagoon.Domain project and click Add-->New Folder (Entities)
- Right click the Entities folder and add a new class (Villa). This will be a data model.
- Add all of the properties. These will be used with EntityFramework to create database table.


29 NuGet Packages for Entity Framework
Add the Nuget packages necessary to use EntityFramework
- Right click WhiteLagoon.Web Project and click Manage NuGet Packages
- Install the following:
	- Microsoft.EntityFrameworkCore.SqlServer
	- Microsoft.EntityFrameworkCore.Design

- Right click WhiteLagoon.Infrastructure Project and click Manage NuGet Packages
- Install the following:
	- Microsoft.EntityFrameworkCore.SqlServer
	- Microsoft.EntityFrameworkCore.Tools
	- Microsoft.EntityFrameworkCore.Design


30 Create Application Db Context
- Right-click the WhiteLagoon.Infrastructure project and Add-->New Folder (Data)
- Right-click the Data folder and Add-->New Class (ApplicationDbContext)
	
	public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) 
	{
	}


31 Add Connection String
- Open the appsettings.json file in the WhiteLagoon.Web project
- Add
	"ConnectionStrings": {
		"DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=WhiteLagoon;Trusted_Connection=True;MultipleActiveResultSets=True;TrustedServerCertificate=True"
	}


32 Register ApplicationDbContext to Program class
- Right-click Dependencies in the WhiteLagoon.Web project
- Click Add Project Reference
- Check the WhietLagoon.Infrastructure project and select <OK>

- Add the following in the Program class after builder.Services.AddControllersWithViews:

	builder.Services.AddDbContext<ApplicationDbContext>(option=>
		option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
		

33 Create Database
- Open Tools-->NuGet Package Manager-->Package Manager Console
- Add the following after the constructor in  the ApplicationDbContext file:

	public DbSet<Villa> Villas { get; set; }
	
- In the Package Manager console, select WhiteLagoon.Infrastructure as the Default project
- Type the following in the Package Manager console command prompt:

	add-migration AddVillaToDb

- then
	
	update-database
	
36 Seed Data in Villa Table
- Add the following after the Villa DbSet in the ApplicationDbContext file:

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		// base.OnModelCreating(modelBuilder);

		modelBuilder.Entity<Villa>().HasData(
			new Villa
			{
				Id = 1,
				Name = "Royal Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x400",
				Occupancy = 4,
				Price = 200,
				Sqft = 550,
			},
			new Villa
			{
				Id = 2,
				Name = "Premium Pool Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x401",
				Occupancy = 4,
				Price = 300,
				Sqft = 550,
			},
			new Villa
			{
				Id = 3,
				Name = "Luxury Pool Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x402",
				Occupancy = 4,
				Price = 400,
				Sqft = 750,
			}
		);
	}
	
- Type the following in the Package Manager Console:

	add-migration seedVillaToDb
	
- then

	update-database


37 Create Villa Controller and Retrieve all Villas
- In the WhiteLagoon.Web project, right-click on Controllers and select Add-->Controller
- Select the MVC Controller - Empty option and click <Add>
- Give it the name "VillaController.cs" - must end with Controller

- Add the dependency injection to the VillaController

	private readonly ApplicationDbContext _db;
	public VillaController(ApplicationDbContext db)
	{
		_db = db;
	}

- Add the following to the VillaController Index method (to retrieve all the Villas):

	var villas = _db.Villas.ToList();
	
38 Add View for Villa list
- Right-click on the Index method in the VillaController file and select Add View
- Select the Razor View - Empty option and the click <Add>
- Accept the default value of Index.cshtml and click <Add>

- Add the villa list (villas) to the View in the controller:

	return View(villas);

- Create a new link in the _layout.cshtml file for the Layout:

	<li class="nav-item">
		<a class="nav-link text-dark" asp-area="" asp-controller="Villa" asp-action="Index">Villa</a>
	</li>

39 Display Villa List on UI
- Add the following code into the Villa Index.cshtml file:

	@model IEnumerable<WhiteLagoon.Domain.Entities.Villa>

	<h1>Villa List</h1>

	<table class="table table-bordered table-striped">
		<thead>
			<tr>
				<th>Name</th>
				<th>Price</th>
				<th>Sqft</th>
				<th>Occupancy</th>
			</tr>
		</thead>
		<tbody>
			@foreach(var obj in Model)
			{
				<tr>
					<td>@obj.Name</td>
					<td>@obj.Price</td>
					<td>@obj.Sqft</td>
					<td>@obj.Occupancy</td>
				</tr>
			}
		</tbody>
	</table>

40 Clean Villa UI
- Make the Villa Index.cshtml as follows:

	@model IEnumerable<WhiteLagoon.Domain.Entities.Villa>

	<div class="w-100 card border-0 p-4">
		<div class="card-header bg-success bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Villa List</h2>
				</div>
			</div>
		</div>
		<div class="card-body border p-4">
			<div class="row pb-3">
				<div class="col-6 offset-6 text-end">
					<a asp-controller="Villa" asp-action="" class="btn btn-secondary">
						Create New Villa
					</a>
				</div>
			</div>

			<table class="table table-bordered table-striped">
				<thead>
					<tr>
						<th>
							Name
						</th>
						<th>Price</th>
						<th>Sqft</th>
						<th>Occupancy</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var obj in Model)
					{
						<tr>
							<td>@obj.Name</td>
							<td>@obj.Price</td>
							<td>@obj.Sqft</td>
							<td>@obj.Occupancy</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>

41 Add Bootstrap Icons
- Go to icons.getbootstrap.com (Bootstrap Icons)
- Go to Usage (towards the bottom is CDN
- Copy the following "link" above the WhiteLagoon.Web.Styles.css link in the _layout.cshtml

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
	
- Copy the Plus Circle before "Create New Villa" in the Villa Index.cshtml file:

	<i class="bi bi-plus-circle"></i> Create New Villa


- Google Search for cdn bootstrap 5 (bootstrap 5.3 is required for dark theme)
- Click the cdnjs bootstrap search option
- Select the version 5.3.3 script tag and copy the min.js link
- Replace the existing bootstrap script line in the _layout.cshtml (at bottom) with new link.

	<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/js/bootstrap.min.js" integrity="sha512-ykZ1QQr0Jy/4ZkvKuqWn4iF3lqPZyij9iRv6sGqLRdTPkY69YX6+7wvVGmsdBbiIfN/8OdsI7HABjvEok6ZopQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

- Copy the script tag for the bootstrap.css 
- Replace the existing bootstrap css script line in the _layout.cshtml (near top) with new link

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css" integrity="sha512-jnSuA4Ss2PkkikSOLtYs8BlYIeeIK1h99ty4YfvRPAlzr377vr3CXDb7sb7eEEBYjDtcYj+AjBH3FLv5uSJuXg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
	
- FOR PRODUCTION, DO NOT USE THE CDN...Download and copy locally in wwwroot/css and wwwroot/js folders.

- At the top of the _layout.cshtml file change:

	<html lang="en">

- to

	<html lang="en" data-bs-theme="dark">

- In the _layout.cshtml remove

	bg-white from <nav ...
	text-dark from nav-links
	
43 Empty View for Create Villa
- Add the following in the VillaController:

	public IActionResult Create()
	{
		return View();
	}
	
- In the Villa Index.cshtml file, add "Create for tha asp-action of the <a> tag

	<a asp-controller="Villa" asp-action="Create" class="btn btn-secondary">

- Right-click on the Create method in the VillaController and select to Add View
- Add and Empty View called Create

45 Create Villa UI
- Use the following logic in the Villa Create.cshtml file:

	@model WhiteLagoon.Domain.Entities.Villa


	<div class="w-100 card border-0 p-4">
		<div class="card-header bg-success bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Create Villa</h2>
				</div>
			</div>
		</div>
		<div class="card-body border p-4">
			<form method="post" class="row">
				<div class="p-3">
					<div class="form-floating py-1 col-12">
						<input asp-for="Name" class="form-control border shadow" />
						<label asp-for="Name" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Description" class="form-control border shadow" />
						<label asp-for="Description" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Price" class="form-control border shadow" />
						<label asp-for="Price" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Sqft" class="form-control border shadow" />
						<label asp-for="Sqft" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Occupancy" class="form-control border shadow" />
						<label asp-for="Occupancy" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="ImageUrl" class="form-control border shadow" />
						<label asp-for="ImageUrl" class="ms-2"></label>
					</div>
					<div class="row pt-2">
						<div class="col-6 col-md-3">
							<button type="submit" class="btn btn-success w-100">
								<i class="bi bi-check-circle"></i> Create
							</button>
						</div>
						<div class="col-6 col-md-3">
							<a asp-controller="Villa" asp-action="Index" class="btn btn-secondary w-100">
								<i class="bi bi-x-circle"></i> Cancel
							</a>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>

47 Create First Villa
- Add the following to the VillaController

	[HttpPost]
	public IActionResult Create(Villa obj)
	{
		_db.Villas.Add(obj);
		_db.SaveChanges();

		return RedirectToAction("Index");

	}

48 Server Side Validation
- Modify the Create method in the VillaController to:

	if (ModelState.IsValid)
	{
		_db.Villas.Add(obj);
		_db.SaveChanges();

		return RedirectToAction("Index");
	}

	return View();
	
- Add a server side validation line for each item in the form in the Create.cshtml

	<span asp-validation-for="Name" class="text-danger"></span>

52 Client Side Validation
- Add the partial view in the section Scripts at the end of the Create.cshtml
  for client side validation

	@section Scripts {
		@{
			<partial name="_ValidationScriptsPartial"/>
		}
	}

53 Edit and Delete buttons in UI
- Add <th> row in <thead> for Index.cshtml

	<th></th>
	
- Add following <td> in the <tbody> for Index.cshtml

	<td>
		<div class="w-75 btn-group" role="group">
			<a asp-controller="Villa" asp-action="Update" asp-route-villaId="@obj.Id"
				class="btn btn-success mx-2">
				<i class="bg-info bi-pencil-square"></i> Edit
			</a>
			<a asp-controller="Villa" asp-action="Delete" asp-route-villaId="@obj.Id"
			   class="btn btn-danger mx-2">
				<i class="bg-info bi-trash-fill"></i> Delete
			</a>
		</div>
	</td>

54 Get Action Method for Update Villa
- Add the following method into the Villa Controller.

	public IActionResult Update(int villaId)
	{
		var villa = _db.Villas.FirstOrDefault(v => v.Id == villaId);
		if (villa == null)
		{
			return NotFound();
		}

		return View(villa);
	}
	
55 Update Villa UI
- Right-click on the Update method in the VillaController and select Add View
- Create a Empty View called Update
- Copy the contents of the Create view into the new Update View.
- Change the Header name and button to Update

58 Update in Action
- Add the following line in the Update.cshtml inside the <form>

	<input asp-for="Id" hidden />
	
- Add the following method inside the VillaController

	[HttpPost]
	public IActionResult Update(Villa obj)
	{
		if (ModelState.IsValid)
		{
			_db.Villas.Update(obj);
			_db.SaveChanges();

			return RedirectToAction("Index");
		}

		return View();
	}
	
59 Delete Villa UI
- Copy the following to the VillaController

	public IActionResult Delete(int villaId)
	{
		var villa = _db.Villas.FirstOrDefault(v => v.Id == villaId);
		if (villa == null)
		{
			return RedirectToAction("Error", "Home");
		}

		return View(villa);
	}

- Right-click on the Delete method and select Add View
- And and Empty View called Delete.
- Copy the following to the new Delete View

	@model WhiteLagoon.Domain.Entities.Villa


	<div class="w-100 card border-0 p-4">
		<div class="card-header bg-success bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Delete Villa</h2>
				</div>
			</div>
		</div>
		<div class="card-body border p-4">
			<form method="post" class="row">

				<input asp-for="Id" hidden />

				<div class="p-3">
					<div asp-validation-summary="ModelOnly"></div>
					@* <div asp-validation-summary="All"></div> *@

					<div class="form-floating py-1 col-12">
						<input asp-for="Name" disabled class="form-control border shadow" />
						<label asp-for="Name" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Description" disabled class="form-control border shadow" />
						<label asp-for="Description" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Price" disabled class="form-control border shadow" />
						<label asp-for="Price" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Sqft" disabled class="form-control border shadow" />
						<label asp-for="Sqft" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Occupancy" disabled class="form-control border shadow" />
						<label asp-for="Occupancy" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="ImageUrl" disabled class="form-control border shadow" />
						<label asp-for="ImageUrl" class="ms-2"></label>
					</div>
					<div class="row pt-2">
						<div class="col-6 col-md-3">
							<button type="submit" class="btn btn-danger w-100">
								<i class="bi bi-trash-fill"></i> Delete
							</button>
						</div>
						<div class="col-6 col-md-3">
							<a asp-controller="Villa" asp-action="Index" class="btn btn-secondary w-100">
								<i class="bi bi-x-circle"></i> Cancel
							</a>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>

	@section Scripts {
		@{
			<partial name="_ValidationScriptsPartial" />
		}
	}
	
60 Delete In Action
- Add the following method in the VillaController

	[HttpPost]
	public IActionResult Delete(Villa obj)
	{
		Villa? objFromDb = _db.Villas.FirstOrDefault(v => v.Id == obj.Id);

		if (objFromDb is not null)
		{
			_db.Villas.Remove(objFromDb);
			_db.SaveChanges();

			return RedirectToAction("Index");
		}

		return View();
	}


61 Temp Data Notifications
- Add the following before @RenderBody() in the _Layout View

	@if(TempData["error"]!=null)
	{
		<div class="text-danger h3">@TempData["error"]</div>
	}
	@if(TempData["success"]!=null)
	{
		<div class="text-success h3">@TempData["success"]</div>
	}

- Add lines similar to the following in the VillaController

	TempData["success"] = "Villa Deleted Successfully";

62 Toastr in Project
- Google search Toastr CDN
- Copy the toastr.min.js Script tag in the if(TempData) statements in the _Layout View:

		<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	
- Copy the toaster.css Script tag to the <head> in the _Layout View

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.css" integrity="sha512-3pIirOrwegjM6erE5gPSwkUzO+3cTjpnV9lexlNZqvupR64iZBnOOTiiLPb9M36zpMScbmUNIcHUqKD47M719g==" crossorigin="anonymous" referrerpolicy="no-referrer" />

- Copy the following jquery script tag in the if(TempData) statements before the toastr script tags

	<script src="~/lib/jquery/dist/jquery.min.js"></script>

- Embed the error and success divs in the _Layout View as such:

	<script type="text/javascript">
		<div class="text-success h3">@TempData["success"]</div>
	</script>

- Go to the CodeSeven Toastr github page.
- Copy an "Other Options" usage examples

	toastr.error('@TempData["error"]');

63 Partial Views
Partial views help reduce redundant code.
Partial views are typically consumed in other views.

- Right-click the Shared folder under Views and select Add View
- Add a View called _Notification (partial view)
- Cut and paste the content from the _Layout view into the new partial view:

	 @if(TempData["error"]!=null)
	 {
		 <script src="~/lib/jquery/dist/jquery.min.js"></script>
		 <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
		 <script type="text/javascript">
			 toastr.error('@TempData["error"]');
			 @* <div class="text-danger h3">@TempData["error"]</div> *@
		 </script>
	 }
	 @if(TempData["success"]!=null)
	 {
		 <script src="~/lib/jquery/dist/jquery.min.js"></script>
		 <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" integrity="sha512-VEd+nq25CkR676O+pLBnDW09R7VQX9Mdiij052gVCp5yVH3jGtH70Ho/UUv4mJDsEdTvqRCFZg0NKGiojGnUCw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
		 <script type="text/javascript">
			 toastr.success('@TempData["success"]');
			 @* <div class="text-success h3">@TempData["success"]</div> *@
		 </script>
	 }
 
 - Copy the following into the _Layout view before @RenderBody
 
	<partial name="_Notification"/>

65 Global Using Statement
- You can define a global using statement in the _ViewImports partial view as such:

	@using WhiteLagoon.Domain.Entities
	
- Then, the long-form can be replaced in other Views in the View folders
- Replace

	@model WhiteLagoon.Domain.Entities.Villa

- With

	@model Villa

69 Remove some ModelState Validation items
- Open up the WhiteLagoon.Domain project file and add the following:

	<ItemGroup>
		<FrameworkReference Include="Microsoft.AspNetCore.App" />
	</ItemGroup>
	
- In the VillaNumber class, add the [ValidateNever] attribute

	[ValidateNever]
	public Villa Villa { get; set; }
	
72 ViewBag
- used to transfer temporary data from the controller to the view
- Add the following in the Create of the VillaNumberController

	ViewBag.VillaList = list;
	
- In the Create View for VillaNumber
Change:
	 <select asp-for="@Model.VillaId" asp-items="@ViewData["VillaList"] as IEnumerable<SelectListItem>"
To:
	 <select asp-for="@Model.VillaId" asp-items="@ViewBag.VillaList"

73 View Models
- Right-click on the WhiteLagoon.Web project and Add-->New Folder called ViewModels
- Right-click on the ViewModels folder and add a Class called VillaNumberVM.
- Add the contents to the new class:

	public VillaNumber? VillaNumber { get; set; }

	[ValidateNever]
	public IEnumerable<SelectListItem>? VillaList { get; set; }

- Add the following to the _ViewImports

	@using WhiteLagoon.Web.ViewModels

- Change the @model VillaNumber to @model VillaNumberVM
- Fix the errors in the file to reference the right items

- Change the Create method in VillaNumberController to:

	VillaNumberVM villaNumberVM = new()
	{
		VillaList = _db.Villas.Select(v => new SelectListItem
		{
			Text = v.Name,
			Value = v.Id.ToString()
		})
	};

	return View(villaNumberVM);

74 Loading Navigation properties:
- You use .include to load navigation properties in EntityFramework
- For the Index method in the VillaNumberController
Change
	var villaNumbers = _db.VillaNumbers.ToList();
To
	var villaNumbers = _db.VillaNumbers.Include(v => v.Villa).ToList();
	
- Inside the Index View for VillaNumber
Change
	<td>@obj.VillaId</td>
To
	<td>@obj.Villa.Name</td>
	
76 Unique Villa Number
- Change the logic in the Create method of VillaNumberController

	[HttpPost]
	public IActionResult Create(VillaNumberVM obj)
	{
		//// The following line removes villa from validation
		//ModelState.Remove("Villa");

		bool roomNumberExists = _db.VillaNumbers.Any(v => v.Villa_Number == obj.VillaNumber.Villa_Number);

		if (ModelState.IsValid && !roomNumberExists)
		{
			_db.VillaNumbers.Add(obj.VillaNumber);
			_db.SaveChanges();

			TempData["success"] = "Villa Number Created Successfully";

			return RedirectToAction("Index");
		}

		// Error message if room number already exists
		if (roomNumberExists)
		{
			TempData["error"] = "Villa Number Already Exists";
		}

		// Need to repopulate the dropdown
		obj.VillaList = _db.Villas.Select(v => new SelectListItem
		{
			Text = v.Name,
			Value = v.Id.ToString()
		});

		return View(obj);
	}

77 Update Villa Number UI
- Change the Update method in the VillaNumberController

	public IActionResult Update(int villaNumberId)
	{
		//var VillaList = _db.Villas.FirstOrDefault(v => v.Price > 50 && v.Occupancy > 0);

		VillaNumberVM villaNumberVM = new()
		{
			VillaList = _db.Villas.Select(v => new SelectListItem
			{
				Text = v.Name,
				Value = v.Id.ToString()
			}),
			VillaNumber = _db.VillaNumbers.FirstOrDefault(v => v.Villa_Number == villaNumberId)
		};

		//var villa = _db.Villas.FirstOrDefault(v => v.Id == villaId);
		if (villaNumberVM.VillaNumber == null)
		{
			return RedirectToAction("Error", "Home");
		}

		return View(villaNumberVM);
	}


- Right-click the Update method and select Add View
- Call the new View "Update"
- Add this content:

@model VillaNumberVM


<div class="w-100 card border-0 p-4">
    <div class="card-header bg-success bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Update Villa Number</h2>
            </div>
        </div>
    </div>
    <div class="card-body border p-4">
        <form method="post" class="row">
            <div class="p-3">

                <div class="form-floating py-1 col-12">
                    <select asp-for="@Model.VillaNumber.VillaId" asp-items="@Model.VillaList"
                            class="form-select border shadow">
                        <option disabled selected>--Select Villa--</option>
                    </select>
                    @* <input asp-for="VillaId" class="form-control border shadow" /> *@
                    <label asp-for="VillaNumber.VillaId" class="ms-2"></label>
                    <span asp-validation-for="VillaNumber.VillaId" class="text-danger"></span>
                </div>
                <div class="form-floating py-1 col-12">
                    <input asp-for="VillaNumber.Villa_Number" disabled class="form-control border shadow" />
                    <label asp-for="VillaNumber.Villa_Number" class="ms-2"></label>
                    <span asp-validation-for="VillaNumber.Villa_Number" class="text-danger"></span>
                </div>
                <div class="form-floating py-1 col-12">
                    <input asp-for="VillaNumber.SpecialDetails" class="form-control border shadow" />
                    <label asp-for="VillaNumber.SpecialDetails" class="ms-2"></label>
                    <span asp-validation-for="VillaNumber.SpecialDetails" class="text-danger"></span>
                </div>
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-success w-100">
                            <i class="bi bi-check-circle"></i> Update
                        </button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-controller="VillaNumber" asp-action="Index" class="btn btn-secondary w-100">
                            <i class="bi bi-x-circle"></i> Cancel
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
}

78 Update Post In Action
- Change the Update post action method in VillaNumberController

	[HttpPost]
	public IActionResult Update(VillaNumberVM villaNumberVM)
	{

		if (ModelState.IsValid)
		{
			_db.VillaNumbers.Update(villaNumberVM.VillaNumber);
			_db.SaveChanges();

			TempData["success"] = "Villa Number has been updated Successfully";

			return RedirectToAction("Index");
		}

		// Need to repopulate the dropdown
		villaNumberVM.VillaList = _db.Villas.Select(v => new SelectListItem
		{
			Text = v.Name,
			Value = v.Id.ToString()
		});

		return View(villaNumberVM);

	}

- Add the following below the <form> tag in the Update View:

	<input asp-for="VillaNumber.Villa_Number" hidden />

79 Delete In Action
- Change the Delete get action method in VillaNumberController to:

	VillaNumberVM villaNumberVM = new()
	{
		VillaList = _db.Villas.Select(v => new SelectListItem
		{
			Text = v.Name,
			Value = v.Id.ToString()
		}),
		VillaNumber = _db.VillaNumbers.FirstOrDefault(v => v.Villa_Number == villaNumberId)
	};

	//var villa = _db.Villas.FirstOrDefault(v => v.Id == villaId);
	if (villaNumberVM.VillaNumber == null)
	{
		return RedirectToAction("Error", "Home");
	}

	return View(villaNumberVM);

- Right-click the Delete method and click Add View
- Call the View "Delete"
- Use the following code:

@model VillaNumberVM


<div class="w-100 card border-0 p-4">
    <div class="card-header bg-success bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Update Villa Number</h2>
            </div>
        </div>
    </div>
    <div class="card-body border p-4">
        <form method="post" class="row">

            <input asp-for="VillaNumber.Villa_Number" hidden />

            <div class="p-3">

                <div class="form-floating py-1 col-12">
                    <select disabled asp-for="@Model.VillaNumber.VillaId" asp-items="@Model.VillaList"
                            class="form-select border shadow">
                        <option disabled selected>--Select Villa--</option>
                    </select>
                    @* <input asp-for="VillaId" class="form-control border shadow" /> *@
                    <label asp-for="VillaNumber.VillaId" class="ms-2"></label>
                    <span asp-validation-for="VillaNumber.VillaId" class="text-danger"></span>
                </div>
                <div class="form-floating py-1 col-12">
                    <input asp-for="VillaNumber.Villa_Number" disabled class="form-control border shadow" />
                    <label asp-for="VillaNumber.Villa_Number" class="ms-2"></label>
                    <span asp-validation-for="VillaNumber.Villa_Number" class="text-danger"></span>
                </div>
                <div class="form-floating py-1 col-12">
                    <input asp-for="VillaNumber.SpecialDetails" disabled class="form-control border shadow" />
                    <label asp-for="VillaNumber.SpecialDetails" class="ms-2"></label>
                    <span asp-validation-for="VillaNumber.SpecialDetails" class="text-danger"></span>
                </div>
                <div class="row pt-2">
                    <div class="col-6 col-md-3">
                        <button type="submit" class="btn btn-danger w-100">
                            <i class="bi bi-check-circle"></i> Delete
                        </button>
                    </div>
                    <div class="col-6 col-md-3">
                        <a asp-controller="VillaNumber" asp-action="Index" class="btn btn-secondary w-100">
                            <i class="bi bi-x-circle"></i> Cancel
                        </a>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial" />
    }
}

- Change the Delete post method to:
	[HttpPost]
	public IActionResult Delete(VillaNumberVM villaNumberVM)
	{
		VillaNumber? objFromDb = _db.VillaNumbers
			.FirstOrDefault(v => v.Villa_Number == villaNumberVM.VillaNumber.Villa_Number);

		if (objFromDb is not null)
		{
			_db.VillaNumbers.Remove(objFromDb);
			_db.SaveChanges();

			TempData["success"] = "Villa Number has been Deleted Successfully";

			return RedirectToAction("Index");
		}

		TempData["error"] = "Villa Number Could not be Deleted";

		return View();

	}


81 Villa Repository Interface
- Right-click the WhiteLagoon.Application and select Add=>Folder "Common"
- Right-click the Common folder and select Add=>Folder "Interfaces"
- Right-click the Interfaces folder and click Add=>New Item=>Interface "IVillaRepository"
- Add this to the interface:

	IEnumerable<Villa> GetAll(Expression<Func<Villa,bool>>? filter = null, string? includeProperties = null);
	Villa Get(Expression<Func<Villa, bool>> filter, string? includeProperties = null);
	void Add(Villa entity);
	void Update(Villa entity);
	void Remove(Villa entity);
	void Save();

82 Implement the Villa Repository
- Right-click the WhietLagoon.Infrastructure and select Add=>Folder "Repository"
- Right-click the Repository and click Add=>Class "VillaRepository"
- The VillaRepository will Implement IVillaRepository

	VillaRepository : IVillaRepository

- Add the following to the Program file for Dependency Injection

	builder.Services.AddScoped<IVillaRepository, VillaRepository>();

84/85 Implementation of methods in Repository
- The VillaRepository should look like this:

public class VillaRepository : IVillaRepository
{
    private readonly ApplicationDbContext _db;
    public VillaRepository(ApplicationDbContext db)
    {
        _db = db;
    }

    public void Add(Villa entity)
    {
        _db.Add(entity);
    }

    public Villa Get(Expression<Func<Villa, bool>> filter, string? includeProperties = null)
    {
        IQueryable<Villa> query = _db.Set<Villa>();
        if (filter != null)
        {
            query = query.Where(filter);
        }

        if (!string.IsNullOrEmpty(includeProperties))
        {
            // Villa,VillaNumber -- case sensitive
            foreach (var includeProp in includeProperties
                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                query = query.Include(includeProp);
            }
        }

        return query.FirstOrDefault();
    }

    public IEnumerable<Villa> GetAll(Expression<Func<Villa, bool>>? filter = null, string? includeProperties = null)
    {
        IQueryable<Villa> query = _db.Set<Villa>();
        if (filter != null)
        {
            query = query.Where(filter);
        }

        if (!string.IsNullOrEmpty(includeProperties))
        {
            // Villa,VillaNumber -- case sensitive
            foreach (var includeProp in includeProperties
                .Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                query = query.Include(includeProp);
            }
        }

        return query.ToList();
    }

    public void Remove(Villa entity)
    {
        _db.Remove(entity);
    }

    public void Save()
    {
        _db.SaveChanges();
    }

    public void Update(Villa entity)
    {
        // Can use either of the following
        _db.Update(entity);
        //_db.Villas.Update(entity);
    }
}

94-97 Add Villa Image Logic
- Add the following to the Villa Entity. NotMapped means it will
  not be added to the DB:

	[NotMapped]
	public IFormFile? Image { get; set; }
	
- Add a new folder in wwwroot/images called "Villa"

- In the Villa "Create" view:
Change:

	<div class="form-floating py-1 col-12">
		<input asp-for="ImageUrl" class="form-control border shadow" />
		<label asp-for="ImageUrl" class="ms-2"></label>
		<span asp-validation-for="ImageUrl" class="text-danger"></span>
	</div>

To:

	<div class="form-floating py-1 col-12">
		<input asp-for="ImageUrl" hidden class="form-control border shadow" />
		<input asp-for="Image" class="form-control border shadow" />
		<label asp-for="ImageUrl" class="ms-2"></label>
		<span asp-validation-for="ImageUrl" class="text-danger"></span>
	</div>
	
- Also, add the following in the <form> tag:

	 enctype="multipart/form-data"

- In the VillaController, add dependency injection for IWebHostEnvironment:

	private readonly IWebHostEnvironment _webHostEnvironment;

- Change the logic in the if(ModelState.IsValid) of the Create [Post] in the VillaController:

	if (obj.Image != null)
	{
		string fileName = Guid.NewGuid().ToString() + Path.GetExtension(obj.Image.FileName);
		string imagePath = Path.Combine(_webHostEnvironment.WebRootPath, @"images\VillaImage");

		using var fileStream = new FileStream(Path.Combine(imagePath, fileName), FileMode.Create);

		obj.Image.CopyTo(fileStream);

		obj.ImageUrl = @"\images\VillaImage\" + fileName;

	}
	else {
		obj.ImageUrl = "https://placehold.co/600x400";
	}

98 Handle Image in Update Villa
- In the Villa Update View:
	- Split the content into col-10 and col-2 divs - old content in col-10 div, 
	  Image in col-2 div
	- Also, add Image and make ImageUrl 'hidden'
	
	<div class="col-10">
		<div class="p-3">
			<div asp-validation-summary="ModelOnly"></div>
			@* <div asp-validation-summary="All"></div> *@

			<div class="form-floating py-1 col-12">
				<input asp-for="Name" class="form-control border shadow" />
				<label asp-for="Name" class="ms-2"></label>
				<span asp-validation-for="Name" class="text-danger"></span>
			</div>
			<div class="form-floating py-1 col-12">
				<input asp-for="Description" class="form-control border shadow" />
				<label asp-for="Description" class="ms-2"></label>
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>
			<div class="form-floating py-1 col-12">
				<input asp-for="Price" class="form-control border shadow" />
				<label asp-for="Price" class="ms-2"></label>
				<span asp-validation-for="Price" class="text-danger"></span>
			</div>
			<div class="form-floating py-1 col-12">
				<input asp-for="Sqft" class="form-control border shadow" />
				<label asp-for="Sqft" class="ms-2"></label>
				<span asp-validation-for="Sqft" class="text-danger"></span>
			</div>
			<div class="form-floating py-1 col-12">
				<input asp-for="Occupancy" class="form-control border shadow" />
				<label asp-for="Occupancy" class="ms-2"></label>
				<span asp-validation-for="Occupancy" class="text-danger"></span>
			</div>
			<div class="form-floating py-1 col-12">
				<input asp-for="Image" class="form-control border shadow" />
				<input asp-for="ImageUrl" hidden class="form-control border shadow" />
				<label asp-for="ImageUrl" class="ms-2"></label>
				<span asp-validation-for="ImageUrl" class="text-danger"></span>
			</div>
			<div class="row pt-2">
				<div class="col-6 col-md-3">
					<button type="submit" class="btn btn-success w-100">
						<i class="bi bi-check-circle"></i> Update
					</button>
				</div>
				<div class="col-6 col-md-3">
					<a asp-controller="Villa" asp-action="Index" class="btn btn-secondary w-100">
						<i class="bi bi-x-circle"></i> Cancel
					</a>
				</div>
			</div>
		</div>
	</div>
	<div class="col-2">
		<img src="@Model.ImageUrl" width="100%" style="border-radius:5px; border:1px solid #bbb9b9" />
	</div>


- In the Update View, and the enctype to the <form> tag:

	<form method="post" class="row" enctype="multipart/form-data">
	
100 Remove Image on Villa Delete
- In the Villa Delete View:
	- Split the content into col-10 and col-2 divs - old content in col-10 div, 
	  Image in col-2 div
	- Also, add Image and make ImageUrl 'hidden'

	<div class="col-10">
		<div class="p-3">
		<div asp-validation-summary="ModelOnly"></div>
		@* <div asp-validation-summary="All"></div> *@

		<div class="form-floating py-1 col-12">
			<input asp-for="Name" disabled class="form-control border shadow" />
			<label asp-for="Name" class="ms-2"></label>
		</div>
		<div class="form-floating py-1 col-12">
			<input asp-for="Description" disabled class="form-control border shadow" />
			<label asp-for="Description" class="ms-2"></label>
		</div>
		<div class="form-floating py-1 col-12">
			<input asp-for="Price" disabled class="form-control border shadow" />
			<label asp-for="Price" class="ms-2"></label>
		</div>
		<div class="form-floating py-1 col-12">
			<input asp-for="Sqft" disabled class="form-control border shadow" />
			<label asp-for="Sqft" class="ms-2"></label>
		</div>
		<div class="form-floating py-1 col-12">
			<input asp-for="Occupancy" disabled class="form-control border shadow" />
			<label asp-for="Occupancy" class="ms-2"></label>
		</div>
		<div class="form-floating py-1 col-12">
			<input asp-for="ImageUrl" disabled class="form-control border shadow" />
			<label asp-for="ImageUrl" class="ms-2"></label>
		</div>
		<div class="row pt-2">
			<div class="col-6 col-md-3">
				<button type="submit" class="btn btn-danger w-100">
					<i class="bi bi-trash-fill"></i> Delete
				</button>
			</div>
			<div class="col-6 col-md-3">
				<a asp-controller="Villa" asp-action="Index" class="btn btn-secondary w-100">
					<i class="bi bi-x-circle"></i> Cancel
				</a>
			</div>
		</div>
	</div>
	</div>
	<div class="col-2">
		<img src="@Model.ImageUrl" width="100%" style="border-radius:5px; border:1px solid #bbb9b9" />
	</div>

- Add the following logic in the Delete Post action in the VillaController:

    if (!string.IsNullOrEmpty(objFromDb.ImageUrl))
    {
        var oldImageFile = Path.Combine(_webHostEnvironment.WebRootPath, objFromDb.ImageUrl.TrimStart('\\'));

        if (System.IO.File.Exists(oldImageFile))
        {
            System.IO.File.Delete(oldImageFile);
        }
    }

102 Create Amenity Model
- Create a new class called Amenity in the Entities folder

	 [Key]
	 public int Id { get; set; }

	 public required string Name { get; set; }
	 public string? Description { get; set; }


	 [ForeignKey("Villa")]
	 public int VillaId { get; set; }

	 [ValidateNever]
	 public Villa Villa { get; set; }
	 
- Add the following DbSet in the ApplicationDbContext

	public DbSet<Amenity> Amenities { get; set; }

- Add seed data in the ApplicationDbContext

103 Create Amenity Table
- Open the Package Manager Console
- Select the WhiteLagoon.Infrastructure project
- Add the table

	add-migration AddAmenityToDb
	update-database

104 Amenity Repository
- Add IAmenityRepository and AmenityRepository
- Update IUnitOfWork and UnitOfWork for Amenity 

105 Amenity Controller
- Create AmenityController
- Create AmenityVM

106 Amenity List
- Add Link for Amenity in _Layout
- Create the Amenity Index View

107 Amenity CRUD
- Create Amenity Create, Delete and Update Views

108 Add DropDown Navbar
- Go to getbootstrap.com
- Go to Docs and search for Navbar
- In the first dropdown example, copy the dropdown <li> content

	<li class="nav-item dropdown">
	  <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
		Dropdown
	  </a>
	  <ul class="dropdown-menu">
		<li><a class="dropdown-item" href="#">Action</a></li>
		<li><a class="dropdown-item" href="#">Another action</a></li>
		<li><hr class="dropdown-divider"></li>
		<li><a class="dropdown-item" href="#">Something else here</a></li>
	  </ul>
	</li>
	
- Replace the existing nav-list items for Villa, VillaNumber and Amenity in _Layout
  Change them to dropdown-itmes and use them in the list as follows:
  
<li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
        Content Management
    </a>
    <ul class="dropdown-menu">
        <li><a class="dropdown-item" asp-area="" asp-controller="Villa" asp-action="Index">Villa</a></li>
        <li><a class="dropdown-item" asp-area="" asp-controller="VillaNumber" asp-action="Index">VillaNumber</a></li>
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item" asp-area="" asp-controller="Amenity" asp-action="Index">Amenity</a></li>
    </ul>
</li>

- Replace the existing bootstrap.min.js with the bootstrap.bundle.min.js (in Layout) from bootstrap CDN

	<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/js/bootstrap.bundle.min.js" integrity="sha512-7Pi/otdlbbCR+LnW+F7PwFcSDJOuUJB3OxtEHbg4vSMvzvJjde4Po1v4BR9Gdc9aXNUNFVUY+SK51wWT8WF0Gg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
	
	- Remove the following CSS code from _Layout.cshtml.css
	
	a.navbar-brand {
	  white-space: normal;
	  text-align: center;
	  word-break: break-all;
	}

	a {
	  color: #0077cc;
	}

- Remove the Privacy link in the _Layout.

109 Home View Model
- Create a HomeVM

110 Index Action Home Controller
- Update the HomeController:

	private readonly IUnitOfWork _unitOfWork;

	public HomeController(IUnitOfWork unitOfWork)
	{
		_unitOfWork = unitOfWork;
	}

	public IActionResult Index()
	{
		HomeVM homeVM = new()
		{
			VillaList = _unitOfWork.Villa.GetAll(),
			Nights = 1,
			CheckInDate = DateOnly.FromDateTime(DateTime.Now),
		};

		return View(homeVM);
	}

111 Load Villa Amenities
- Add the following Navigation property to the Villa Entity

	[ValidateNever]
	public IEnumerable<Amenity> VillaAmenity { get; set; }

- Add includeProperties the GetAll call in the HomeController Index Action

	VillaList = _unitOfWork.Villa.GetAll(includeProperties: "VillaAmenity"),
	
112 Home Page UI
- Copy the content of the course code to the Home Index View
- Remove a couple of styling items from _layout

113 Bind HomeVM
- Change the <input tag for Check In Date of the Home Index View:

	<input asp-for="CheckInDate" type="date" class="form-control" />
	
- Change the select for No. of nights in the Home Index View:

	<select class="form-select">
		@for(var i = 1; i < 11; i++)
		{
			<option value="@i">@i</option>
		}
	</select>

114 Home UI - Display All Villas
- Copy the content of the course code for the villa list to the Home Index View: 
  Copy it right before the end <form> tag

- Create @foreach loop in the Home Index View to loop though the Villa List
- Make edits to display dynamic data


115 Dynamic Modal Id
- Change the following (2 places) in the Home Index View:

	exampleModal-@(11)

-to

	exampleModal-@(villa.Id)
	
116 Villa Details Modal
- Copy the content of the course code for the villa details to the Home Index View 
  Copy it to where it says Villa Details

- Make modifications to it to make it dynamic.
- Add some images for the Villas (via Edit).

118 Partial View.
- In the Views/Shared folder, create a new View called _VillaDetail
- Cut and paste the contents of the Modal Body in the Home Index View into the _VillaDetail partial view

- Add the following to the Modal Body in the Home Index View:

	<partial name="_VillaDetail" model="@villa" />


119 Add Identity to the Application
- In the ApplicationDbContext, instead of having the class extend from DbContext:

	public class ApplicationDbContext : IdentityDbContext
	
- Install the Microsoft.AspNetCore.Identity.EntityFrameworkCore NuGet package in WhiteLagoon.Infrastructure
- Add the following to the Program.cs file:

	// Add Identity
	builder.Services.AddIdentity<IdentityUser, IdentityRole>()
		.AddEntityFrameworkStores<ApplicationDbContext>();

120 Create Identity Tables
- In the ApplicationDbContext, uncomment the following line in the OnModelCreating override

	base.OnModelCreating(modelBuilder);
	
- Open the Package Manager Console for WhietLagoon.Infrastructure

	add-migration AddIdentityToDb
	update-database
	
121 Add more Columns to Users Table
- Create a new Entity called ApplicationUser that inherits from IdentityUser
- Change the ApplicationDbContext class definition to:

	public class ApplicationDbContext : IdentityDbContext<ApplicationUser>
	
- Add a DbSet in ApplicationDbContext

	public DbSet<ApplicationUser> ApplicationUsers { get; set; }

- In Program file, change:

	builder.Services.AddIdentity<IdentityUser, IdentityRole>()
		.AddEntityFrameworkStores<ApplicationDbContext>();

To:

	builder.Services.AddIdentity<ApplicationUser, IdentityRole>()
		.AddEntityFrameworkStores<ApplicationDbContext>();

- Open the Package Manager Console for WhietLagoon.Infrastructure

	add-migration AddPropertiesToUsersTable
	update-database
	
122 Login and Register VM
- Create a new class called LoginVM in ViewModels
- Create another class called RegisterVM in ViewModels

123 Add Login and Register Link in Navbar
- Add an new Partial View called "_LoginPartial"

	<ul class="navbar-nav">
		<li class="nav-item">
			<a class="nav-link">Register</a>
		</li>
		<li class="nav-item">
			<a class="nav-link">Login</a>
		</li>
	</ul>

124 Add Account Controller and Inject Helper
- Create a new Controller Called "AccountController"

	private readonly IUnitOfWork _unitOfWork;
	private readonly UserManager<ApplicationUser> _userManager;
	private readonly SignInManager<ApplicationUser> _signInManager;
	private readonly RoleManager<IdentityRole> _roleManager;

	public AccountController(IUnitOfWork unitOfWork,
		UserManager<ApplicationUser> userManager,
		SignInManager<ApplicationUser> signInManager,
		RoleManager<IdentityRole> roleManager)
	{
		_unitOfWork = unitOfWork;
		_userManager = userManager;
		_signInManager = signInManager;
		_roleManager = roleManager;
	}


	public IActionResult Login()
	{
		return View();
	}

	public IActionResult Register()
	{
		return View();
	}

- Change the nav-links in _LoginPartial View

	<a class="nav-link" asp-controller="Account" asp-action="Register">Register</a>
	
	<a class="nav-link" asp-controller="Account" asp-action="Login">Login</a>
	
125 Login Get Action
- Set up the Login Action in the AccountController:

	public IActionResult Login(string returnUrl=null)
	{
		// If the returnUrl is not empty, set it to the returnUrl,
		// otherwise set it to the root URL
		returnUrl ??= Url.Content("~/");

		LoginVM loginVM = new ()
		{
			RedirectUrl = returnUrl
		};

		return View(loginVM);
	}

126 Login UI
- Right-click on the Login action in the AccountController and Create a new Login View
- Copy the content of the course code for the login to the Login View
- Add the following to the top:

	@model LoginVM

- Bind the content
- Add validation
- Add Validation Script Partial

	@section Scripts {
		<partial name="_ValidationScriptsPartial" />
	}

127 Add Roles in Table
- Right-click on the Register action in the AccountController and Create a new Register View
- Copy the content of the course code for the register to the Register View
- Setup the Register Action in the AccountController

	public IActionResult Register()
	{
		//if (!_roleManager.RoleExistsAsync("Admin").Result)
		if (!_roleManager.RoleExistsAsync("Admin").GetAwaiter().GetResult())
		{ 
			_roleManager.CreateAsync(new IdentityRole("Admin")).Wait();
			_roleManager.CreateAsync(new IdentityRole("Customer")).Wait();
		}

		return View();
	}

128 Retrieve Roles in DropDown
- Add the following properties to the RegisterVM

	public string? Role { get; set; }
	
	[ValidateNever]
	public IEnumerable<SelectListItem>? RoleList { get; set; }

- Add the following to the Register Action in the AccountController:

	RegisterVM registerVM = new()
	{
		RoleList = _roleManager.Roles.Select(x => new SelectListItem
		{
			Text = x.Name,
			Value = x.Name
		})
	};

	return View(registerVM);

- Add the model to the Register View

	@model RegisterVM

- Bind the content
- Add validation

129 Say NO to Magic StringSplitOptions
- In the Login View, add asp-controller and asp-action for Register and ForgotPassword
- Create a new folder in the Common folder of WhietLagoon.Application called "Utility"
- Create a new class in the Utility folder called "SD"

	public static class SD
	{
		public const string Role_Customer = "Customer";
		public const string Role_Admin = "Admin";
	}

- Replace the "Magic Strings" in the Register Action of the AccountController

	if (!_roleManager.RoleExistsAsync(SD.Role_Admin).GetAwaiter().GetResult())
	{ 
		_roleManager.CreateAsync(new IdentityRole(SD.Role_Admin)).Wait();
		_roleManager.CreateAsync(new IdentityRole(SD.Role_Customer)).Wait();
	}

130 Register Post Endpoint
- Create a Register HttpPost endpoint in AccountController

	[HttpPost]
	public async Task<IActionResult> Register(RegisterVM registerVM)
	{
		ApplicationUser user = new()
		{
			Name = registerVM.Name,
			Email = registerVM.Email,
			PhoneNumber = registerVM.PhoneNumber,
			NormalizedEmail = registerVM.Email.ToUpper(),
			EmailConfirmed = true,
			UserName = registerVM.Email,
			CreatedAt = DateTime.Now
		};

		var result = await _userManager.CreateAsync(user, registerVM.Password);
		if (result.Succeeded)
		{
			if (!string.IsNullOrEmpty(registerVM.Role))
			{
				await _userManager.AddToRoleAsync(user, registerVM.Role);
			}
			else
			{
				await _userManager.AddToRoleAsync(user, SD.Role_Customer);
			}

			await _signInManager.SignInAsync(user, isPersistent: false);

			if (string.IsNullOrEmpty(registerVM.RedirectUrl))
			{
				return RedirectToAction("Index", "Home");
			}
			else
			{
				return LocalRedirect(registerVM.RedirectUrl);
			}
		}

		foreach (var error in result.Errors)
		{
			ModelState.AddModelError("", error.Description);
		}

		registerVM.RoleList = _roleManager.Roles.Select(x => new SelectListItem
		{
			Text = x.Name,
			Value = x.Name
		});

		return View(registerVM);
	}

131 Login Post Endpoint
- Create a Login HttpPost endpoint in AccountController

	[HttpPost]
	public async Task<IActionResult> Login(LoginVM loginVM)
	{
		if (ModelState.IsValid)
		{
			var result = await _signInManager
				.PasswordSignInAsync(loginVM.Email, loginVM.Password, loginVM.RememberMe, lockoutOnFailure:false);

			if (result.Succeeded)
			{
				if (string.IsNullOrEmpty(loginVM.RedirectUrl))
				{
					return RedirectToAction("Index", "Home");
				}
				else
				{
					return LocalRedirect(loginVM.RedirectUrl);
				}
			}
			else
			{
				ModelState.AddModelError("", "Invalid login attempt.");
			}
		}

		return View(loginVM);

	}

132 Register in Action
- Test Registration for Admin
	cessna777@gmail.com
	Admin123*
	
133 Check if User is Signed In
- Change the _LoginPartial View to:

	@using Microsoft.AspNetCore.Identity

	@inject SignInManager<ApplicationUser> SignInManager
	@inject UserManager<ApplicationUser> UserManager

	<ul class="navbar-nav">

		@if (SignInManager.IsSignedIn(User))
		{
			<li class="nav-item">
				<a class="nav-link" href="#">Hello, @UserManager.GetUserName(User)</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" asp-controller="Account" asp-action="Logout">Logout</a>
			</li>
		}
		else
		{
			<li class="nav-item">
				<a class="nav-link" asp-controller="Account" asp-action="Register">Register</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" asp-controller="Account" asp-action="Login">Login</a>
			</li>
		}
	</ul>

134 Logout in Action
- Create a Logout endpoint in AccountController

	public async Task<IActionResult> Logout()
	{

		await _signInManager.SignOutAsync();

		return RedirectToAction("Index", "Home");
	}

135 Access Denied UI
- Create a Customer Account
	davidpaysthebills@gmail.com
	Customer123*

- Create a AccessDenied endpoint in AccountController

	public IActionResult AccessDenied()
	{
		return View();
	}

- Create a View called "AccessDenied"

	<div class="container pt-2">
		<img src="~/images/accessDenied.jpg" width="100%" />
	</div>

136 Authorization with Roles
- In the AmenityController, add the following above the controller class:

	[Authorize(Roles = SD.Role_Admin)]
	
- That only authorizes Admins to use the methods in the controller

- In the VillaController, add the following above the controller class:

	[Authorize]
	
- That means you have to be logged in to use the methods in the controller

137 Configuring Application Cookie
- Add this to the Program file:

	// Example of Configuring Application Cookie to override the default cookie settings
	builder.Services.ConfigureApplicationCookie(options =>
	{
		options.LoginPath = "/Account/Login";
		options.AccessDeniedPath = "/Account/AccessDenied";
	});

138 Modify Default Password Requirements
- In the AccountController for the Register HttpPost endpoint, wrap the appropriate
  section with:
  
	if (ModelState.IsValid)

- Add the following to the end of the Register View:

	@section Scripts {
		<partial name="_ValidationScriptsPartial" />
	}
	
- In the Program file, add:

	// Set customized password options
	builder.Services.Configure<IdentityOptions>(option =>
	{
		option.Password.RequiredLength = 6;
	});

140 Fix Return URL issues
- Add the following below the <form> tag in the Login View:
  This will fix one issue with redirectUrl

	<input asp-for="RedirectUrl" hidden />
	
- Change to the following (add asp-route-returnUrl) in the Login View:

	 <a asp-controller="Account" asp-action="Register" asp-route-returnUrl="@Model.RedirectUrl">Register as a new user</a>

- Add variable to the Register Get Action in AccountController:

	public IActionResult Register(string returnUrl = null)

- Add the following line to the Register Get Action in AccountController

	returnUrl ??= Url.Content("~/");

- Add the following line to the Register Get Action in AccountController
  To set RedirectUrl = returnUrl
  
RegisterVM registerVM = new()
{
    RoleList = _roleManager.Roles.Select(x => new SelectListItem
    {
        Text = x.Name,
        Value = x.Name
    }),
    RedirectUrl = returnUrl
};

- Add the following below the <form> tag in the Register View:
  This will fix one issue with redirectUrl

	<input asp-for="RedirectUrl" hidden />
	
==========Section 12 Villa Availability==========

141 Add Villa Availability
- Add the following property to the Villa Entity

	[NotMapped]
	public bool IsAvailable { get; set; } = true;
	
- Create the Index Post action Method in the HomeController

	[HttpPost]
	public IActionResult Index(HomeVM homeVM)
	{
		homeVM.VillaList = _unitOfWork.Villa.GetAll(includeProperties: "VillaAmenity");

		foreach (var villa in homeVM.VillaList)
		{
			if (villa.Id % 2 == 0)
			{
				villa.IsAvailable = false;
			}
		}

		return View(homeVM);
	}

- In the Home Index View, change the button type to Submit for the dropdown

	<button type="submit" class="btn btn-success btn-block">
	
- Add the following logic around the Book button in the Home Index View

	<div class="col-4">
		@if (Model.CheckInDate >= DateOnly.FromDateTime(DateTime.Now))
		{
			if (villa.IsAvailable)
			{
				<a class="btn btn-success form-control btn-block">
					Book
				</a>
			}
			else
			{
				<a class="btn btn-outline-danger disabled form-control btn-block">
					Sold Out
				</a>
			}
			
		}
	</div>

142 Show availability only in the future.
- In the Home Index View, change the following from >= to >

	@if (Model.CheckInDate > DateOnly.FromDateTime(DateTime.Now))

143 Move Villa List to Partial View
- Add the following ActionResult method in the HomeController:

	public IActionResult GetVillaByDate(int nights, DateOnly checkInDate)
	{
		var villaList = _unitOfWork.Villa.GetAll(includeProperties: "VillaAmenity").ToList();

		foreach (var villa in villaList)
		{
			if (villa.Id % 2 == 0)
			{
				villa.IsAvailable = false;
			}
		}

		HomeVM homeVM = new()
		{
			CheckInDate = checkInDate,
			VillaList = villaList,
			Nights = nights
		};

		return View(homeVM);
	}

- Cut the content of VillaList <div> in the Home Index View into a new partial View called "_VillaList"
- Add the partial view to the Home Index View where the original code was removed:

	<partial name="_VillaList" model="Model"/>

144 Reload Partial View without Refreshing Page
- Right-click wwwroot and select Add->Client Side Library
	Provider: jsdelivr
	Library: jquery-ajax-unobtrusive@3.2.6
- Click Install
- Add the following to the end of the <script tag section in _Layout view:

	<script src="~/jquery-ajax-unobtrusive/dist/jquery.unobtrusive-ajax.min.js"></script>
	
- Change the return in the GetVillaByDate ActionResult method in the HomeController

	return PartialView("_VillaList", homeVM);

- To maintain what he did in the course, copy the minified ajax library to the 
  lib folder under wwwroot
  Change the path of the <script tag in the _Layout:
  
	<script src="~/lib/jquery.unobtrusive-ajax.min.js"></script>

- Change the <form tag in the Home Index View:

	<form method="post" style="background-color:black"
		asp-action="GetVillaByDate" data-ajax-method="post" data-ajax="true"
		data-ajax-mode="replace" data-ajax-update="#VillasList">

145 Without Unobtrusive Library
- Comment out the ajax library put in the _Layout view in previous section
- Return the <form tag in the Home Index View to:

	<form method="post" style="background-color:black"
		  asp-action="GetVillasByDate" >
		 
- Change the Submit button in the Home Index View:

	<button type="button" onclick="fnLoadVillaList()" class="btn btn-success btn-block">
		<i class="bi bi-search"></i>  &nbsp; Check Availability
	</button>

- Add the asp-for item to the <select tag:

	<select class="form-select" asp-for="Nights" >
	
- Add the section for ajax call:

	@section scripts {
		<script>
			function fnLoadVillaList() {
				var objData = {
					checkInDate: $("#CheckInDate").val(),
					nights: $("#Nights").val()
				};

				$.ajax({
					type: "POST",
					data: objData,
					url: "@Url.Action("GetVillasByDate", "Home")",
					success: function (data) {
						$("#VillasList").empty();
						$("#VillasList").html(data);
					}
				});
			}
    </script>

146 Spinner in Action
- Right-click on the css folder in wwwroot and click Add->New Item
- Add a Style Sheet called spinner.css
- Copy the content of the course code for the spinner to the spinner.css
- Add a <div tag to the _Layout View in <main

	<div class="loading spinner" style="display:none;"></div>
	
- Add the following <link tag at the bottom of the <link tag section in the _Layout View

	<link rel="stylesheet" href="~/css/spinner.css" />

- Change the ajax function call to show and hide the spinner.  Also, 
  add failure and error cases:
  
	function fnLoadVillaList() {
		$('.spinner').show();
		var objData = {
			checkInDate: $("#CheckInDate").val(),
			nights: $("#Nights").val()
		};

		$.ajax({
			type: "POST",
			data: objData,
			url: "@Url.Action("GetVillasByDate", "Home")",
			success: function (data) {
				$("#VillasList").empty();
				$("#VillasList").html(data);
				$('.spinner').hide();
			},
			failure: function (response) {
				$('.spinner').hide();
				alert(response.responseText);
			},
			error: function (response) {
				$('.spinner').hide();
				alert(response.responseText);
			}
		});
	}


147 Create Booking Model
- Create a new Entity called "Booking"

	public class Booking
	{
		[Key]
		public int Id { get; set; }


		// ===Foreign Key=================
		[Required]
		public string UserId { get; set; }

		[ForeignKey("UserId")]
		public ApplicationUser User { get; set; }
		// ===End Foreign Key==============

		// ===Foreign Key=================
		[Required]
		public int VillaId { get; set; }

		[ForeignKey("VillaId")]
		public Villa Villa { get; set; }
		// ===End Foreign Key==============

		[Required]
		public string Name { get; set; }

		[Required]
		public string Email { get; set; }

		public string? Phone { get; set; }

		[Required]
		public double TotalCost { get; set; }

		public int Nights { get; set; }
		public string? Status { get; set; }

		[Required]
		public DateTime BookingDate { get; set; }

		[Required]
		public DateTime CheckInDate { get; set; }

		[Required]
		public DateTime CheckOutDate { get; set;}

		public bool IsPaymentSuccessful { get; set; } = false;
		public DateTime PaymentDate { get; set; }

		//=== For stipe payment processing=====
		public string? StripeSessionId { get; set; }
		public string? StripePaymenIntenttId { get;}
		//===End for stripe payment processing=====

		public DateTime ActualCheckInDate { get; set; }
		public DateTime ActualCheckOutDate { get; set; }

		public int VillaNumber { get; set; }
	}

148 Create Booking Table and Repository
- Add the following in the ApplicationDbContext:

	public DbSet<Booking> Bookings { get; set; }
	
- Create an IBookingRepository:

	public interface IBookingRepository : IRepository<Booking>
	{
		void Update(Booking entity);
	}

- Add the IBookingRepository to the IUnitOfWork:

	IBookingRepository Booking { get; }

- Create a BookingRepository:

	public class BookingRepository : Repository<Booking>, IBookingRepository
	{
		private readonly ApplicationDbContext _db;
		public BookingRepository(ApplicationDbContext db) : base(db)
		{
			_db = db;
		}

		public void Update(Booking entity)  
		{
			_db.Bookings.Update(entity);
		}
	}

- Add Booking Repository to UnitOfWork:

	public IBookingRepository Booking { get; private set; }
	
and

	Booking = new BookingRepository(_db);

- In the Package Manager console, select the WhiteLagoon.Infrastructure

	add-migration addBookingToDb
	update-database

149 Get Action Finalize Booking
- Create a BookingController

	public class BookingController : Controller
	{
		private readonly IUnitOfWork _unitOfWork;
		public BookingController(IUnitOfWork unitOfWork)
		{
			_unitOfWork = unitOfWork;
		}


		public IActionResult FinalizeBooking(int villaId, DateOnly checkInDate, int nights)
		{
			Booking booking = new()
			{
				VillaId = villaId,
				Villa = _unitOfWork.Villa.Get(u=>u.Id==villaId, includeProperties:"VillaAmenity"),
				CheckInDate = checkInDate,
				Nights = nights,
				CheckOutDate = checkInDate.AddDays(nights),
			};
			return View(booking);
		}
	}

150 Clean Up
- Remove the [HttpPost] Home Index method (no longer needed.
- Add [HttpPost] to Home GetVillasByDate method

151 Call Finalize Booking Action
- Add asp-controller and asp-action to Book button in _VillaList as
  well as the arguments required

	<a asp-controller="Booking" asp-action="FinalizeBooking" 
	 asp-route-villaId="@villa.Id"
	 asp-route-checkInDate="@Model.CheckInDate"
	 asp-route-nights="@Model.Nights"
	 class="btn btn-success form-control btn-block">
		Book
	</a>

- Create a FinalizeBooking View (e.g. from the FinalizeBooking method in the BookingController)
- Copy the content of the course code for the Finalize Booking to the FinalizeBooking View

152 Finalize Booking Dynamic UI
- Add controller and action to the Modify Selection button in the FinalizeBooking View

	<a 
		asp-controller="Home"
		asp-action="Index" 
		class="btn btn-sm btn-outline-danger" style="width:200px;">
		<i class="bi bi-arrow-left-square"></i> &nbsp; Modify Selection
	</a>

- In the FinalizeBooking View, replace:

	~~VILLA DETAILS HERE~~

With

	<partial name="_VillaDetail" model="@Model.Villa" />

- Add the following in the FinalizeBooking Action Method in BookingController:

	booking.TotalCost = booking.Villa.Price * nights;

- Fix the bindings in the FinalizeBooking View

153 Add ApplicationUser Repository
- Create an IApplicationUserRepository:

	public interface IApplicationUserRepository : IRepository<ApplicationUser>
	{
	}

- Add it to IUnitOfWork:

	IApplicationUserRepository ApplicationUser { get; }
	
- Create an ApplicationUser Repository

	public class ApplicationUserRepository : Repository<ApplicationUser>, IApplicationUserRepository
	{
		private readonly ApplicationDbContext _db;
		public ApplicationUserRepository(ApplicationDbContext db) : base(db)
		{
			_db = db;
		}
	}

- Add the following to UnitOfWorkRepository:

	public IApplicationUserRepository ApplicationUser { get; private set; }

	ApplicationUser = new ApplicationUserRepository(_db);
