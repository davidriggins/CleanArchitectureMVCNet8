.NET Core MVC Clean Architecture [Bhrugen Patel]  2/20/25


25 Create Project
Create Solution/Project
- Open Visual Studio
- Create New ASP.NET Core Web App (Model-View-Controller)
- Create a Project name and Solution Name (WhiteLagoon)
- Additional Information Page:
	- .NET 8.0 [Framework]
	- None [Authentication Type]
	- Check [Configure for HTTPS]


27 Create Clean Architecture
Add a New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Domain)

Add another New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Application)

Add another New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Infrastructure)

Delete all the default Class1.cs files from the new projects.


28 Create Villa Model
We want to break out the default architecture into a Clean Architecture
- Right click the WhiteLagoon.Domain project and click Add-->New Folder (Entities)
- Right click the Entities folder and add a new class (Villa). This will be a data model.
- Add all of the properties. These will be used with EntityFramework to create database table.


29 NuGet Packages for Entity Framework
Add the Nuget packages necessary to use EntityFramework
- Right click WhiteLagoon.Web Project and click Manage NuGet Packages
- Install the following:
	- Microsoft.EntityFrameworkCore.SqlServer
	- Microsoft.EntityFrameworkCore.Design

- Right click WhiteLagoon.Infrastructure Project and click Manage NuGet Packages
- Install the following:
	- Microsoft.EntityFrameworkCore.SqlServer
	- Microsoft.EntityFrameworkCore.Tools
	- Microsoft.EntityFrameworkCore.Design


30 Create Application Db Context
- Right-click the WhiteLagoon.Infrastructure project and Add-->New Folder (Data)
- Right-click the Data folder and Add-->New Class (ApplicationDbContext)
	
	public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) 
	{
	}


31 Add Connection String
- Open the appsettings.json file in the WhiteLagoon.Web project
- Add
	"ConnectionStrings": {
		"DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=WhiteLagoon;Trusted_Connection=True;MultipleActiveResultSets=True;TrustedServerCertificate=True"
	}


32 Register ApplicationDbContext to Program class
- Right-click Dependencies in the WhiteLagoon.Web project
- Click Add Project Reference
- Check the WhietLagoon.Infrastructure project and select <OK>

- Add the following in the Program class after builder.Services.AddControllersWithViews:

	builder.Services.AddDbContext<ApplicationDbContext>(option=>
		option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
		

33 Create Database
- Open Tools-->NuGet Package Manager-->Package Manager Console
- Add the following after the constructor in  the ApplicationDbContext file:

	public DbSet<Villa> Villas { get; set; }
	
- In the Package Manager console, select WhiteLagoon.Infrastructure as the Default project
- Type the following in the Package Manager console command prompt:

	add-migration AddVillaToDb

- then
	
	update-database
	
36 Seed Data in Villa Table
- Add the following after the Villa DbSet in the ApplicationDbContext file:

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		// base.OnModelCreating(modelBuilder);

		modelBuilder.Entity<Villa>().HasData(
			new Villa
			{
				Id = 1,
				Name = "Royal Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x400",
				Occupancy = 4,
				Price = 200,
				Sqft = 550,
			},
			new Villa
			{
				Id = 2,
				Name = "Premium Pool Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x401",
				Occupancy = 4,
				Price = 300,
				Sqft = 550,
			},
			new Villa
			{
				Id = 3,
				Name = "Luxury Pool Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x402",
				Occupancy = 4,
				Price = 400,
				Sqft = 750,
			}
		);
	}
	
- Type the following in the Package Manager Console:

	add-migration seedVillaToDb
	
- then

	update-database


37 Create Villa Controller and Retrieve all Villas
- In the WhiteLagoon.Web project, right-click on Controllers and select Add-->Controller
- Select the MVC Controller - Empty option and click <Add>
- Give it the name "VillaController.cs" - must end with Controller

- Add the dependency injection to the VillaController

	private readonly ApplicationDbContext _db;
	public VillaController(ApplicationDbContext db)
	{
		_db = db;
	}

- Add the following to the VillaController Index method (to retrieve all the Villas):

	var villas = _db.Villas.ToList();
	
38 Add View for Villa list
- Right-click on the Index method in the VillaController file and select Add View
- Select the Razor View - Empty option and the click <Add>
- Accept the default value of Index.cshtml and click <Add>

- Add the villa list (villas) to the View in the controller:

	return View(villas);

- Create a new link in the _layout.cshtml file for the Layout:

	<li class="nav-item">
		<a class="nav-link text-dark" asp-area="" asp-controller="Villa" asp-action="Index">Villa</a>
	</li>

39 Display Villa List on UI
- Add the following code into the Villa Index.cshtml file:

	@model IEnumerable<WhiteLagoon.Domain.Entities.Villa>

	<h1>Villa List</h1>

	<table class="table table-bordered table-striped">
		<thead>
			<tr>
				<th>Name</th>
				<th>Price</th>
				<th>Sqft</th>
				<th>Occupancy</th>
			</tr>
		</thead>
		<tbody>
			@foreach(var obj in Model)
			{
				<tr>
					<td>@obj.Name</td>
					<td>@obj.Price</td>
					<td>@obj.Sqft</td>
					<td>@obj.Occupancy</td>
				</tr>
			}
		</tbody>
	</table>

40 Clean Villa UI
- Make the Villa Index.cshtml as follows:

	@model IEnumerable<WhiteLagoon.Domain.Entities.Villa>

	<div class="w-100 card border-0 p-4">
		<div class="card-header bg-success bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Villa List</h2>
				</div>
			</div>
		</div>
		<div class="card-body border p-4">
			<div class="row pb-3">
				<div class="col-6 offset-6 text-end">
					<a asp-controller="Villa" asp-action="" class="btn btn-secondary">
						Create New Villa
					</a>
				</div>
			</div>

			<table class="table table-bordered table-striped">
				<thead>
					<tr>
						<th>
							Name
						</th>
						<th>Price</th>
						<th>Sqft</th>
						<th>Occupancy</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var obj in Model)
					{
						<tr>
							<td>@obj.Name</td>
							<td>@obj.Price</td>
							<td>@obj.Sqft</td>
							<td>@obj.Occupancy</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>

41 Add Bootstrap Icons
- Go to icons.getbootstrap.com (Bootstrap Icons)
- Go to Usage (towards the bottom is CDN
- Copy the following "link" above the WhiteLagoon.Web.Styles.css link in the _layout.cshtml

	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
	
- Copy the Plus Circle before "Create New Villa" in the Villa Index.cshtml file:

	<i class="bi bi-plus-circle"></i> Create New Villa


- Google Search for cdn bootstrap 5 (bootstrap 5.3 is required for dark theme)
- Click the cdnjs bootstrap search option
- Select the version 5.3.3 script tag and copy the min.js link
- Replace the existing bootstrap script line in the _layout.cshtml (at bottom) with new link.

	<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/js/bootstrap.min.js" integrity="sha512-ykZ1QQr0Jy/4ZkvKuqWn4iF3lqPZyij9iRv6sGqLRdTPkY69YX6+7wvVGmsdBbiIfN/8OdsI7HABjvEok6ZopQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

- Copy the script tag for the bootstrap.css 
- Replace the existing bootstrap css script line in the _layout.cshtml (near top) with new link

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.3/css/bootstrap.min.css" integrity="sha512-jnSuA4Ss2PkkikSOLtYs8BlYIeeIK1h99ty4YfvRPAlzr377vr3CXDb7sb7eEEBYjDtcYj+AjBH3FLv5uSJuXg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
	
- FOR PRODUCTION, DO NOT USE THE CDN...Download and copy locally in wwwroot/css and wwwroot/js folders.

- At the top of the _layout.cshtml file change:

	<html lang="en">

- to

	<html lang="en" data-bs-theme="dark">

- In the _layout.cshtml remove

	bg-white from <nav ...
	text-dark from nav-links
	
43 Empty View for Create Villa
- Add the following in the VillaController:

	public IActionResult Create()
	{
		return View();
	}
	
- In the Villa Index.cshtml file, add "Create for tha asp-action of the <a> tag

	<a asp-controller="Villa" asp-action="Create" class="btn btn-secondary">

- Right-click on the Create method in the VillaController and select to Add View
- Add and Empty View called Create

45 Create Villa UI
- Use the following logic in the Villa Create.cshtml file:

	@model WhiteLagoon.Domain.Entities.Villa


	<div class="w-100 card border-0 p-4">
		<div class="card-header bg-success bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Create Villa</h2>
				</div>
			</div>
		</div>
		<div class="card-body border p-4">
			<form method="post" class="row">
				<div class="p-3">
					<div class="form-floating py-1 col-12">
						<input asp-for="Name" class="form-control border shadow" />
						<label asp-for="Name" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Description" class="form-control border shadow" />
						<label asp-for="Description" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Price" class="form-control border shadow" />
						<label asp-for="Price" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Sqft" class="form-control border shadow" />
						<label asp-for="Sqft" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="Occupancy" class="form-control border shadow" />
						<label asp-for="Occupancy" class="ms-2"></label>
					</div>
					<div class="form-floating py-1 col-12">
						<input asp-for="ImageUrl" class="form-control border shadow" />
						<label asp-for="ImageUrl" class="ms-2"></label>
					</div>
					<div class="row pt-2">
						<div class="col-6 col-md-3">
							<button type="submit" class="btn btn-success w-100">
								<i class="bi bi-check-circle"></i> Create
							</button>
						</div>
						<div class="col-6 col-md-3">
							<a asp-controller="Villa" asp-action="Index" class="btn btn-secondary w-100">
								<i class="bi bi-x-circle"></i> Cancel
							</a>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>

47 Create First Villa
- Add the following to the VillaController

	[HttpPost]
	public IActionResult Create(Villa obj)
	{
		_db.Villas.Add(obj);
		_db.SaveChanges();

		return RedirectToAction("Index");

	}

48 Server Side Validation
- Modify the Create method in the VillaController to:

	if (ModelState.IsValid)
	{
		_db.Villas.Add(obj);
		_db.SaveChanges();

		return RedirectToAction("Index");
	}

	return View();
	
- Add a server side validation line for each item in the form in the Create.cshtml

	<span asp-validation-for="Name" class="text-danger"></span>

52 Client Side Validation
- Add the partial view in the section Scripts at the end of the Create.cshtml
  for client side validation

	@section Scripts {
		@{
			<partial name="_ValidationScriptsPartial"/>
		}
	}

53 Edit and Delete buttons in UI
- Add <th> row in <thead> for Index.cshtml

	<th></th>
	
- Add following <td> in the <tbody> for Index.cshtml

	<td>
		<div class="w-75 btn-group" role="group">
			<a asp-controller="Villa" asp-action="Update" asp-route-villaId="@obj.Id"
				class="btn btn-success mx-2">
				<i class="bg-info bi-pencil-square"></i> Edit
			</a>
			<a asp-controller="Villa" asp-action="Delete" asp-route-villaId="@obj.Id"
			   class="btn btn-danger mx-2">
				<i class="bg-info bi-trash-fill"></i> Delete
			</a>
		</div>
	</td>

54 Get Action Method for Update Villa
- Add the following method into the Villa Controller.

	public IActionResult Update(int villaId)
	{
		var villa = _db.Villas.FirstOrDefault(v => v.Id == villaId);
		if (villa == null)
		{
			return NotFound();
		}

		return View(villa);
	}
	
55 Update Villa UI
- Right-click on the Update method in the VillaController and select Add View
- Create a Empty View called Update
- Copy the contents of the Create view into the new Update View.
- Change the Header name and button to Update

58 Update in Action
- Add the following line in the Update.cshtml inside the <form>

	<input asp-for="Id" hidden />
	
- Add the following method inside the VillaController

	[HttpPost]
	public IActionResult Update(Villa obj)
	{
		if (ModelState.IsValid)
		{
			_db.Villas.Update(obj);
			_db.SaveChanges();

			return RedirectToAction("Index");
		}

		return View();
	}