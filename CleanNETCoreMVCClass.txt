.NET Core MVC Clean Architecture [Bhrugen Patel]  2/20/25


25 Create Project
Create Solution/Project
- Open Visual Studio
- Create New ASP.NET Core Web App (Model-View-Controller)
- Create a Project name and Solution Name (WhiteLagoon)
- Additional Information Page:
	- .NET 8.0 [Framework]
	- None [Authentication Type]
	- Check [Configure for HTTPS]


27 Create Clean Architecture
Add a New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Domain)

Add another New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Application)

Add another New Project to the Solution
- Right click on the Solution and Add-->New Project
- Add C# Class Library (WhietLagoon.Infrastructure)

Delete all the default Class1.cs files from the new projects.


28 Create Villa Model
We want to break out the default architecture into a Clean Architecture
- Right click the WhiteLagoon.Domain project and click Add-->New Folder (Entities)
- Right click the Entities folder and add a new class (Villa). This will be a data model.
- Add all of the properties. These will be used with EntityFramework to create database table.


29 NuGet Packages for Entity Framework
Add the Nuget packages necessary to use EntityFramework
- Right click WhiteLagoon.Web Project and click Manage NuGet Packages
- Install the following:
	- Microsoft.EntityFrameworkCore.SqlServer
	- Microsoft.EntityFrameworkCore.Design

- Right click WhiteLagoon.Infrastructure Project and click Manage NuGet Packages
- Install the following:
	- Microsoft.EntityFrameworkCore.SqlServer
	- Microsoft.EntityFrameworkCore.Tools
	- Microsoft.EntityFrameworkCore.Design


30 Create Application Db Context
- Right-click the WhiteLagoon.Infrastructure project and Add-->New Folder (Data)
- Right-click the Data folder and Add-->New Class (ApplicationDbContext)
	
	public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) : base(options) 
	{
	}


31 Add Connection String
- Open the appsettings.json file in the WhiteLagoon.Web project
- Add
	"ConnectionStrings": {
		"DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=WhiteLagoon;Trusted_Connection=True;MultipleActiveResultSets=True;TrustedServerCertificate=True"
	}


32 Register ApplicationDbContext to Program class
- Right-click Dependencies in the WhiteLagoon.Web project
- Click Add Project Reference
- Check the WhietLagoon.Infrastructure project and select <OK>

- Add the following in the Program class after builder.Services.AddControllersWithViews:

	builder.Services.AddDbContext<ApplicationDbContext>(option=>
		option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
		

33 Create Database
- Open Tools-->NuGet Package Manager-->Package Manager Console
- Add the following after the constructor in  the ApplicationDbContext file:

	public DbSet<Villa> Villas { get; set; }
	
- In the Package Manager console, select WhiteLagoon.Infrastructure as the Default project
- Type the following in the Package Manager console command prompt:

	add-migration AddVillaToDb

- then
	
	update-database
	
36 Seed Data in Villa Table
- Add the following after the Villa DbSet in the ApplicationDbContext file:

	protected override void OnModelCreating(ModelBuilder modelBuilder)
	{
		// base.OnModelCreating(modelBuilder);

		modelBuilder.Entity<Villa>().HasData(
			new Villa
			{
				Id = 1,
				Name = "Royal Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x400",
				Occupancy = 4,
				Price = 200,
				Sqft = 550,
			},
			new Villa
			{
				Id = 2,
				Name = "Premium Pool Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x401",
				Occupancy = 4,
				Price = 300,
				Sqft = 550,
			},
			new Villa
			{
				Id = 3,
				Name = "Luxury Pool Villa",
				Description = "Fusce 11 tincidunt maximus leo, sed scelerisque massa auctor sit amet. Donec ex mauris, hendrerit quis nibh ac, efficitur fringilla enim.",
				ImageUrl = "https://placehold.co/600x402",
				Occupancy = 4,
				Price = 400,
				Sqft = 750,
			}
		);
	}
	
- Type the following in the Package Manager Console:

	add-migration seedVillaToDb
	
- then

	update-database


37 Create Villa Controller and Retrieve all Villas
- In the WhiteLagoon.Web project, right-click on Controllers and select Add-->Controller
- Select the MVC Controller - Empty option and click <Add>
- Give it the name "VillaController.cs" - must end with Controller

- Add the dependency injection to the VillaController

	private readonly ApplicationDbContext _db;
	public VillaController(ApplicationDbContext db)
	{
		_db = db;
	}

- Add the following to the VillaController Index method (to retrieve all the Villas):

	var villas = _db.Villas.ToList();
	
38 Add View for Villa list
- Right-click on the Index method in the VillaController file and select Add View
- Select the Razor View - Empty option and the click <Add>
- Accept the default value of Index.cshtml and click <Add>

- Add the villa list (villas) to the View in the controller:

	return View(villas);

- Create a new link in the _layout.cshtml file for the Layout:

	<li class="nav-item">
		<a class="nav-link text-dark" asp-area="" asp-controller="Villa" asp-action="Index">Villa</a>
	</li>

39 Display Villa List on UI
- Add the following code into the Villa Index.cshtml file:

	@model IEnumerable<WhiteLagoon.Domain.Entities.Villa>

	<h1>Villa List</h1>

	<table class="table table-bordered table-striped">
		<thead>
			<tr>
				<th>Name</th>
				<th>Price</th>
				<th>Sqft</th>
				<th>Occupancy</th>
			</tr>
		</thead>
		<tbody>
			@foreach(var obj in Model)
			{
				<tr>
					<td>@obj.Name</td>
					<td>@obj.Price</td>
					<td>@obj.Sqft</td>
					<td>@obj.Occupancy</td>
				</tr>
			}
		</tbody>
	</table>

40 Clean Villa UI
- Make the Villa Index.cshtml as follows:

	@model IEnumerable<WhiteLagoon.Domain.Entities.Villa>

	<div class="w-100 card border-0 p-4">
		<div class="card-header bg-success bg-gradient ml-0 py-3">
			<div class="row">
				<div class="col-12 text-center">
					<h2 class="text-white py-2">Villa List</h2>
				</div>
			</div>
		</div>
		<div class="card-body border p-4">
			<div class="row pb-3">
				<div class="col-6 offset-6 text-end">
					<a asp-controller="Villa" asp-action="" class="btn btn-secondary">
						Create New Villa
					</a>
				</div>
			</div>

			<table class="table table-bordered table-striped">
				<thead>
					<tr>
						<th>
							Name
						</th>
						<th>Price</th>
						<th>Sqft</th>
						<th>Occupancy</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var obj in Model)
					{
						<tr>
							<td>@obj.Name</td>
							<td>@obj.Price</td>
							<td>@obj.Sqft</td>
							<td>@obj.Occupancy</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>

